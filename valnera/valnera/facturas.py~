# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from osv import fields, osv
from tools.translate import _

class account_invoice(osv.osv):
    _inherit = 'account.invoice'
    _columns = {
                    'expedicion_id':fields.many2one('expediciones.expediciones','Expedición'),
                    'recibido': fields.selection([('no', 'No'),
                                    ('si', 'Sí'),
                                    ],'Recibido'),
                    'pagado': fields.selection([('no', 'No'),
                                    ('si', 'Sí'),
                                    ],'Pagado'),
                    'afecta': fields.selection([                                 
                                    ('no', 'No'),
                                    ('mercancias', 'Mercancias'),
                                    ('buques', 'Buques'),
                                    ],'Afecta'),
                }

    def create(self, cr, uid, vals, context=None):
        if context is None:
            context = {}

        res = super(account_invoice, self).create(cr, uid, vals, context=context)

        inv = self.browse(cr, uid, res)

        for line in inv.invoice_line:
            if not line.expedicion_id :
               line.write( {'expedicion_id':inv.expedicion_id.id, 'afecta':inv.afecta})

        return res

    def write(self, cr, uid, ids, vals, context=None):
        if context is None:
            context = {}

        res = super(account_invoice, self).write(cr, uid, ids, vals,  context=context)

        inv = self.browse(cr, uid, ids)[0]

        for line in inv.invoice_line:
            line.write( {'nfactura':str(inv.number)})
            if not line.expedicion_id :
                 line.write( {'expedicion_id':inv.expedicion_id.id, 'afecta':inv.afecta})

        return res

account_invoice()


class account_invoice_line(osv.osv):
    _inherit = 'account.invoice.line'



    def write(self, cr, uid, ids, vals, context=None):
        if context is None:
            context = {}

        res = super(account_invoice_line,self).write(cr, uid, ids, vals, context=context)
        lin = self.browse(cr, uid, ids)[0]

        if ('expedicion_id' in vals) and (str(vals['expedicion_id']) !='False') and ( ( not 'afecta' in vals) and (not lin.afecta)) :
            raise osv.except_osv(_('Aviso'),_('Tienes que rellenar el campo Afecta en todas las lineas con expedición\n\n (Se asigna automáticamente la expedición de la factura a todas las lineas)'))

        if 'emitido' not in vals:
            if (lin.invoice_id.type == 'out_invoice' or 'in_refund') :
                lin.write({'emitido':lin.price_subtotal, 'nfactura':lin.invoice_id.name})
            else:
                lin.write({'recibido':lin.price_subtotal, 'nfactura':lin.invoice_id.name})

        if lin.expedicion_id:
            lin.expedicion_id.recalcular()           


        return res



    def create(self, cr, uid, vals, context=None):
        if context is None:
            context = {}

        res = super(account_invoice_line,self).create(cr, uid, vals, context=context)
        lin = self.browse(cr, uid, res)
        
        if ('expedicion_id' in vals) and (str(vals['expedicion_id']) !='False')  and (not 'afecta' in vals) :
            raise osv.except_osv(_('Aviso'),_('Tienes que rellenar el campo Afecta en todas las lineas con expedición\n\n (Se asigna automáticamente la expedición de la factura a todas las lineas)'))

        if lin.expedicion_id:
            lin.expedicion_id.recalcular()        

        if lin.invoice_id.type == 'out_invoice' or 'in_refund':
            lin.write({'emitido':lin.price_subtotal, 'nfactura':lin.invoice_id.name})
        else:
            lin.write({'recibido':lin.price_subtotal, 'nfactura':lin.invoice_id.name})
        return res



    _columns = {

                    'expedicion_id':fields.many2one('expediciones.expediciones','Expedición'),
                    'recibido': fields.selection([('no', 'No'),
                                    ('si', 'Sí'),
                                    ],'Recibido'),

                    'pagado': fields.selection([('no', 'No'),
                                    ('si', 'Sí'),
                                    ],'Pagado'),

                    'afecta': fields.selection([                                 
                                    ('no', 'No'),
                                    ('mercancias', 'Mercancias'),
                                    ('buques', 'Buques'),
                                    ],'Afecta'),

                    'emitido':fields.float('Emitido'),
                    
                    'recibido':fields.float('Recibido'),

                    'nfactura':fields.char('Numero de factura', size= 256),
                
                }

account_invoice_line()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
